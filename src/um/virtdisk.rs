use shared::minwindef::{
	DWORD, ULONG, BOOL, PULONG,
};
use um::minwinbase::LPOVERLAPPED;
use um::winnt::{
	PCWSTR, HANDLE, PHANDLE, PSECURITY_DESCRIPTOR, ULONGLONG, WCHAR,
};
use shared::guiddef::GUID;

ENUM!{enum OPEN_VIRTUAL_DISK_FLAG {
	OPEN_VIRTUAL_DISK_FLAG_NONE = 0x0,
	OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS = 0x1,
	OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE = 0x2,
	OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE = 0x4,
	OPEN_VIRTUAL_DISK_FLAG_CACHED_IO = 0x8,
	OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN = 0x10,
	OPEN_VIRTUAL_DISK_FLAG_PARENT_CACHED_IO = 0x20,
	OPEN_VIRTUAL_DISK_FLAG_VHDSET_FILE_ONLY = 0x40,
	OPEN_VIRTUAL_DISK_FLAG_IGNORE_RELATIVE_PARENT_LOCATOR = 0x80,
	OPEN_VIRTUAL_DISK_FLAG_NO_WRITE_HARDENING = 0x100,
	OPEN_VIRTUAL_DISK_FLAG_SUPPORT_COMPRESSED_VOLUMES = 0x200,
}}

ENUM!{enum VIRTUAL_DISK_ACCESS_MASK {
	VIRTUAL_DISK_ACCESS_NONE                = 0x00000000,
	VIRTUAL_DISK_ACCESS_ATTACH_RO           = 0x00010000,
	VIRTUAL_DISK_ACCESS_ATTACH_RW           = 0x00020000,
	VIRTUAL_DISK_ACCESS_DETACH              = 0x00040000,
	VIRTUAL_DISK_ACCESS_GET_INFO            = 0x00080000,
	VIRTUAL_DISK_ACCESS_CREATE              = 0x00100000,
	VIRTUAL_DISK_ACCESS_METAOPS             = 0x00200000,
	VIRTUAL_DISK_ACCESS_READ                = 0x000d0000,
	VIRTUAL_DISK_ACCESS_ALL                 = 0x003f0000,
	VIRTUAL_DISK_ACCESS_WRITABLE            = 0x00320000,
}}

ENUM!{enum OPEN_VIRTUAL_DISK_VERSION {
    OPEN_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
	OPEN_VIRTUAL_DISK_VERSION_1           = 1,
	OPEN_VIRTUAL_DISK_VERSION_2           = 2,
	OPEN_VIRTUAL_DISK_VERSION_3           = 3,
}}

STRUCT!{struct _OPEN_VIRTUAL_DISK_PARAMETERS_1 {
	rwDepth: ULONG,
}}

STRUCT!{struct _OPEN_VIRTUAL_DISK_PARAMETERS_2 {
	GetInfoOnly: BOOL,
	ReadOnly: BOOL,
	ResiliencyGuid: GUID,
}}

STRUCT!{struct _OPEN_VIRTUAL_DISK_PARAMETERS_3 {
	GetInfoOnly: BOOL,
	ReadOnly: BOOL,
	ResiliencyGuid: GUID,
	SnapshotId: GUID,
}}

#[derive(Copy, Clone)]
#[repr(C)]
pub union _OPEN_VIRTUAL_DISK_PARAMETERS {
	Version1: _OPEN_VIRTUAL_DISK_PARAMETERS_1,
	Version2: _OPEN_VIRTUAL_DISK_PARAMETERS_2,
	Version3: _OPEN_VIRTUAL_DISK_PARAMETERS_3,
}

STRUCT!{struct OPEN_VIRTUAL_DISK_PARAMETERS {
	Version: OPEN_VIRTUAL_DISK_VERSION,
	inner: _OPEN_VIRTUAL_DISK_PARAMETERS,
}}

STRUCT!{struct VIRTUAL_STORAGE_TYPE {
	DeviceId: ULONG,
	VendorId: GUID,
}}

// CREATE_VIRTUAL_DISK

ENUM!{enum CREATE_VIRTUAL_DISK_VERSION {
	CREATE_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
	CREATE_VIRTUAL_DISK_VERSION_1           = 1,
	CREATE_VIRTUAL_DISK_VERSION_2           = 2,
	CREATE_VIRTUAL_DISK_VERSION_3           = 3,
	CREATE_VIRTUAL_DISK_VERSION_4           = 4,
}}

STRUCT!{struct _CREATE_VIRTUAL_DISK_VERSION_1 {
	UniqueId: GUID,
	MaximumSize: ULONGLONG,
	BlockSizeInBytes: ULONG,
	SectorSizeInBytes: ULONG,
	ParentPath: PCWSTR,
	SourcePath: PCWSTR,
}}

STRUCT!{struct _CREATE_VIRTUAL_DISK_VERSION_2 {
	UniqueId: GUID,
	MaximumSize: ULONGLONG,
	BlockSizeInBytes: ULONG,
	SectorSizeInBytes: ULONG,
	PhysicalSectorSizeInBytes: ULONG,
	OpenFlags: OPEN_VIRTUAL_DISK_FLAG,
	ParentPath: PCWSTR,
	SourcePath: PCWSTR,
	ParentVirtualStorageType: VIRTUAL_STORAGE_TYPE,
	SourceVirtualStorageType: VIRTUAL_STORAGE_TYPE,
	ResiliencyGuid: GUID,
}}

STRUCT!{struct _CREATE_VIRTUAL_DISK_VERSION_3 {
	UniqueId: GUID,
	MaximumSize: ULONGLONG,
	BlockSizeInBytes: ULONG,
	SectorSizeInBytes: ULONG,
	PhysicalSectorSizeInBytes: ULONG,
	OpenFlags: OPEN_VIRTUAL_DISK_FLAG,
	ParentPath: PCWSTR,
	SourcePath: PCWSTR,
	ParentVirtualStorageType: VIRTUAL_STORAGE_TYPE,
	SourceVirtualStorageType: VIRTUAL_STORAGE_TYPE,
	ResiliencyGuid: GUID,
	SourceLimitPath: PCWSTR,
	BackingStorageDevice: VIRTUAL_STORAGE_TYPE,
}}

STRUCT!{struct _CREATE_VIRTUAL_DISK_VERSION_4 {
	UniqueId: GUID,
	MaximumSize: ULONGLONG,
	BlockSizeInBytes: ULONG,
	SectorSizeInBytes: ULONG,
	PhysicalSectorSizeInBytes: ULONG,
	OpenFlags: OPEN_VIRTUAL_DISK_FLAG,
	ParentPath: PCWSTR,
	SourcePath: PCWSTR,
	ParentVirtualStorageType: VIRTUAL_STORAGE_TYPE,
	SourceVirtualStorageType: VIRTUAL_STORAGE_TYPE,
	ResiliencyGuid: GUID,
	SourceLimitPath: PCWSTR,
	BackingStorageDevice: VIRTUAL_STORAGE_TYPE,
	PmemAddressAbstractionType: GUID,
	DataAlignment: ULONGLONG,
}}

#[derive(Copy, Clone)]
#[repr(C)]
pub union _CREATE_VIRTUAL_DISK_PARAMETERS {
	Version1: _CREATE_VIRTUAL_DISK_VERSION_1,
	Version2: _CREATE_VIRTUAL_DISK_VERSION_2,
	Version3: _CREATE_VIRTUAL_DISK_VERSION_3,
	Version4: _CREATE_VIRTUAL_DISK_VERSION_4,
}

STRUCT!{struct CREATE_VIRTUAL_DISK_PARAMETERS {
	Version: CREATE_VIRTUAL_DISK_VERSION,
	inner: _CREATE_VIRTUAL_DISK_PARAMETERS,
}}

ENUM!{enum CREATE_VIRTUAL_DISK_FLAG {
    CREATE_VIRTUAL_DISK_FLAG_NONE                          = 0x0,
	CREATE_VIRTUAL_DISK_FLAG_FULL_PHYSICAL_ALLOCATION      = 0x1,
	CREATE_VIRTUAL_DISK_FLAG_PREVENT_WRITES_TO_SOURCE_DISK = 0x2,
	CREATE_VIRTUAL_DISK_FLAG_DO_NOT_COPY_METADATA_FROM_PARENT = 0x4,
	CREATE_VIRTUAL_DISK_FLAG_CREATE_BACKING_STORAGE = 0x8,
	CREATE_VIRTUAL_DISK_FLAG_USE_CHANGE_TRACKING_SOURCE_LIMIT = 0x10,
	CREATE_VIRTUAL_DISK_FLAG_PRESERVE_PARENT_CHANGE_TRACKING_STATE = 0x20,
	CREATE_VIRTUAL_DISK_FLAG_VHD_SET_USE_ORIGINAL_BACKING_STORAGE = 0x40,
	CREATE_VIRTUAL_DISK_FLAG_SPARSE_FILE = 0x80,
	CREATE_VIRTUAL_DISK_FLAG_PMEM_COMPATIBLE = 0x100,
}}

ENUM!{enum GET_VIRTUAL_DISK_INFO_VERSION {
	GET_VIRTUAL_DISK_INFO_UNSPECIFIED                   = 0,
	GET_VIRTUAL_DISK_INFO_SIZE                          = 1,
	GET_VIRTUAL_DISK_INFO_IDENTIFIER                    = 2,
	GET_VIRTUAL_DISK_INFO_PARENT_LOCATION               = 3,
	GET_VIRTUAL_DISK_INFO_PARENT_IDENTIFIER             = 4,
	GET_VIRTUAL_DISK_INFO_PARENT_TIMESTAMP              = 5,
	GET_VIRTUAL_DISK_INFO_VIRTUAL_STORAGE_TYPE          = 6,
	GET_VIRTUAL_DISK_INFO_PROVIDER_SUBTYPE              = 7,
	GET_VIRTUAL_DISK_INFO_IS_4K_ALIGNED                 = 8,
	GET_VIRTUAL_DISK_INFO_PHYSICAL_DISK                 = 9,
	GET_VIRTUAL_DISK_INFO_VHD_PHYSICAL_SECTOR_SIZE      = 10,
	GET_VIRTUAL_DISK_INFO_SMALLEST_SAFE_VIRTUAL_SIZE    = 11,
	GET_VIRTUAL_DISK_INFO_FRAGMENTATION                 = 12,
	GET_VIRTUAL_DISK_INFO_IS_LOADED                     = 13,
	GET_VIRTUAL_DISK_INFO_VIRTUAL_DISK_ID               = 14,
	GET_VIRTUAL_DISK_INFO_CHANGE_TRACKING_STATE         = 15,
}}

STRUCT!{struct GET_VIRTUAL_DISK_INFO_SIZE {
	VirtualSize: ULONGLONG,
	PhysicalSize: ULONGLONG,
	BlockSize: ULONG,
	SectorSize: ULONG,
}}

STRUCT!{struct GET_VIRTUAL_DISK_INFO_PARENTLOCATION {
	ParentResolved: ULONG,
	ParentLocationBuffer: [WCHAR; 1],
}}

STRUCT!{struct GET_VIRTUAL_DISK_INFO_PHYSICALDISK {
	LogicalSectorSize: ULONG,
	PhysicalSectorSize: ULONG,
	IsRemote: BOOL,
}}

STRUCT!{struct GET_VIRTUAL_DISK_INFO_CHANGETRACKINGSTATE {
	Enabled: BOOL,
	NewerChanges: BOOL,
	MostRecentId: [WCHAR; 1],
}}

#[derive(Copy, Clone)]
#[repr(C)]
pub union _GET_VIRTUAL_DISK_INFO {
	Size: GET_VIRTUAL_DISK_INFO_SIZE,
	Identifier: GUID,
	ParentLocation: GET_VIRTUAL_DISK_INFO_PARENTLOCATION,
	ParentIdentifier: GUID,
	ParentTimestamp: ULONG,
	VirtualStorageType: VIRTUAL_STORAGE_TYPE,
	ProviderSubtype: ULONG,
	Is4kAligned: BOOL,
	IsLoaded: BOOL,
	PhysicalDisk: GET_VIRTUAL_DISK_INFO_PHYSICALDISK,
	VhdPhysicalSectorSize: ULONG,
	SmallestSafeVirtualSize: ULONGLONG,
	FragmentationPercentage: ULONG,
	VirtualDiskId: GUID,
	ChangeTrackingState: GET_VIRTUAL_DISK_INFO_CHANGETRACKINGSTATE,
}

STRUCT!{struct GET_VIRTUAL_DISK_INFO {
	Version: GET_VIRTUAL_DISK_INFO_VERSION,
	inner: _GET_VIRTUAL_DISK_INFO,
}}

ENUM!{enum ATTACH_VIRTUAL_DISK_FLAG {
	ATTACH_VIRTUAL_DISK_FLAG_NONE                           = 0x00000000,
	ATTACH_VIRTUAL_DISK_FLAG_READ_ONLY                      = 0x00000001,
	ATTACH_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER                = 0x00000002,
	ATTACH_VIRTUAL_DISK_FLAG_PERMANENT_LIFETIME             = 0x00000004,
	ATTACH_VIRTUAL_DISK_FLAG_NO_LOCAL_HOST                  = 0x00000008,
	ATTACH_VIRTUAL_DISK_FLAG_NO_SECURITY_DESCRIPTOR         = 0x00000010,
	ATTACH_VIRTUAL_DISK_FLAG_BYPASS_DEFAULT_ENCRYPTION_POLICY = 0x00000020,
	ATTACH_VIRTUAL_DISK_FLAG_NON_PNP                        = 0x00000040,
	ATTACH_VIRTUAL_DISK_FLAG_RESTRICTED_RANGE               = 0x00000080,
	ATTACH_VIRTUAL_DISK_FLAG_SINGLE_PARTITION               = 0x00000100,
	ATTACH_VIRTUAL_DISK_FLAG_REGISTER_VOLUME                = 0x00000200,
}}

ENUM!{enum ATTACH_VIRTUAL_DISK_VERSION {
	ATTACH_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,
	ATTACH_VIRTUAL_DISK_VERSION_1           = 1,
	ATTACH_VIRTUAL_DISK_VERSION_2           = 2,
}}

STRUCT!{struct _ATTACH_VIRTUAL_DISK_PARAMETERS_VERSION_1 {
	Reserved: ULONG,
}}

STRUCT!{struct _ATTACH_VIRTUAL_DISK_PARAMETERS_VERSION_2 {
	RestrictedOffset: ULONGLONG,
	RestrictedLength: ULONGLONG,
}}

#[derive(Copy, Clone)]
#[repr(C)]
pub union _ATTACH_VIRTUAL_DISK_PARAMETERS {
	Version1: _ATTACH_VIRTUAL_DISK_PARAMETERS_VERSION_1,
	Version2: _ATTACH_VIRTUAL_DISK_PARAMETERS_VERSION_2,
}

STRUCT!{struct ATTACH_VIRTUAL_DISK_PARAMETERS {
	Version: GET_VIRTUAL_DISK_INFO,
	inner: _ATTACH_VIRTUAL_DISK_PARAMETERS,
}}


pub type PVIRTUAL_STORAGE_TYPE = *mut VIRTUAL_STORAGE_TYPE;
pub type POPEN_VIRTUAL_DISK_PARAMETERS = *mut OPEN_VIRTUAL_DISK_PARAMETERS;
pub type PCREATE_VIRTUAL_DISK_PARAMETERS = *mut CREATE_VIRTUAL_DISK_PARAMETERS;
pub type PGET_VIRTUAL_DISK_INFO = *mut GET_VIRTUAL_DISK_INFO;
pub type PATTACH_VIRTUAL_DISK_PARAMETERS = *mut ATTACH_VIRTUAL_DISK_PARAMETERS;

extern "system" {
	pub fn OpenVirtualDisk(
		pVirtualStorageType: PVIRTUAL_STORAGE_TYPE,
		pPath: PCWSTR,
		VirtualDiskAccessMask: VIRTUAL_DISK_ACCESS_MASK,
		Flags: OPEN_VIRTUAL_DISK_FLAG,
		pParameters: POPEN_VIRTUAL_DISK_PARAMETERS,
		pHandle: PHANDLE,
	) -> DWORD;

	pub fn CreateVirtualDisk(
		pVirtualStorageType: PVIRTUAL_STORAGE_TYPE,
		pPath: PCWSTR,
		VirtualDiskAccessMask: VIRTUAL_DISK_ACCESS_MASK,
		SecurityDescriptor: PSECURITY_DESCRIPTOR,
		Flags: CREATE_VIRTUAL_DISK_FLAG,
		ProviderSpecificFlags: ULONG,
		pParameters: PCREATE_VIRTUAL_DISK_PARAMETERS,
		lpOverlapped: LPOVERLAPPED,
		pHandle: PHANDLE,
	) -> DWORD;

	pub fn GetVirtualDiskInformation(
		VirtualDiskHandle: HANDLE,
		VirtualDiskInfoSize: PULONG,
		pVirtualDiskInfo: PGET_VIRTUAL_DISK_INFO,
		pSizeUsed: PULONG,
	) -> DWORD;

	pub fn AttachVirtualDisk(
		VirtualDiskHandle: HANDLE,
		SecurityDescriptor: PSECURITY_DESCRIPTOR,
		Flags: ATTACH_VIRTUAL_DISK_FLAG,
		ProviderSpecificFlags: ULONG,
		pParameters: PATTACH_VIRTUAL_DISK_PARAMETERS,
		lpOverlapped: LPOVERLAPPED,
	) -> DWORD;
}
